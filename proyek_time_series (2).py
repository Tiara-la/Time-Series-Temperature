# -*- coding: utf-8 -*-
"""Proyek Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HYxHSkrfuq0pZ1NL4aNZ_EDfUh7YypDV

Nama : Tiara Lailatul Nikmah  
Email : tiaralaila21@gmail.com  
Username : Tiara Laila  
No Telepon : 089635924667  
Asal kota : Juwana, Pati
"""

# import library
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

#  ubah dataset menjadi dataframe
data = pd.read_csv('weather_data_kolkata_2015_2020.csv')
data.head()

data.tail()

data.info()

data['DATETIME'] = pd.to_datetime(data['DATETIME'])

data.dtypes

data['TEMPERATURE'].min()

data['TEMPERATURE'].max()

# Mengambil sampel 11000 record data saja
data = data[:11000]

# mengecek apakah ada nilai yang hilang
data.isnull().sum()

# membuat plot dari data
dates = data['DATETIME'].values
temp  = data['TEMPERATURE'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(dates, temp)
plt.title('Temperature',
          fontsize=20);

# mae sebelum minmaxscaler
maxmae = (data['TEMPERATURE'].max() - data['TEMPERATURE'].min()) * 0.1
maxmae

# normalisasi dataset
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler = scaler.fit(data[['TEMPERATURE']])
data_scaled = scaler.transform(data[['TEMPERATURE']])

# minmaxscaler
from sklearn.preprocessing import MinMaxScaler
minmaxscaler = MinMaxScaler(feature_range = (0,1))
scaled = minmaxscaler.fit_transform(data[['TEMPERATURE']])
data[['TEMPERATURE']] = scaled

# mae sesudah minmaxscaler
maxmae = (data['TEMPERATURE'].max() - data['TEMPERATURE'].min()) * 0.1
maxmae

data.head()

data.tail()

# bagi data untuk training dan data untuk testing
# validation set sebesar 20% dari total dataset
from sklearn.model_selection import train_test_split
temp_latih, temp_test, dates_latih, dates_test = train_test_split(temp, dates, test_size=0.2, random_state = 0 , shuffle=False)
print(len(temp_latih), len(temp_test))

# merubah data menjadi format yang dapat diterima oleh model
# sebuah series/atribut yang telah di konversi menjadi tipe numpy
# mengembalikan label dan atribut dari dataset dalam bentuk batch
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

# membuat arsitektur model
# menggunakan 2 buah layer LSTM yang memiliki parameter return_sequences yang bernilai True
train_set = windowed_dataset(temp_latih, window_size=256, batch_size=1024, shuffle_buffer=2000)
validation_set = windowed_dataset(temp_test, window_size=256, batch_size=1024, shuffle_buffer=2000)
model = tf.keras.models.Sequential([    
  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128, return_sequences=True)),    
  tf.keras.layers.MaxPooling1D(),      
  tf.keras.layers.Dropout(0.2),                
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64), 
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(20, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 100)
])

# fungsi callback untuk menghentikan epoch apabila mae sudah mencapai kurang dari 10%
class toCallback(tf.keras.callbacks.Callback): 
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<0.1):
      print("Proses Training Berhenti, Tingkat Mae Sudah Kurang Dari 10%")
      self.model.stop_training = True

callbacks= toCallback()

lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-8 * 10**(epoch / 20))
#  pada optimizer menggunakan parameter learning rate dan momentum
optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
#  loss function Huber yang umum digunakan pada kasus time series
#  metrik yang digunakan untuk mengevaluasi model adalah MAE
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
tf.keras.backend.set_floatx('float64')
latih = model.fit(train_set, batch_size=1024, epochs=400, validation_data=validation_set, verbose=2, callbacks=[callbacks])

# membuat grafik akurasi data training dan validasi
import matplotlib.pyplot as plt

mae = latih.history['mae']
val_mae = latih.history['val_mae']
loss = latih.history['loss']
val_loss = latih.history['val_loss']

epoch_range = range(len(mae))

plt.plot(epoch_range, mae, label='Mae')
plt.plot(epoch_range, val_mae, label='Validation Mae')
plt.title('Grafik MAE')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(loc=0)
plt.figure()
plt.show()

plt.plot(epoch_range, loss, label='Training loss')
plt.plot(epoch_range, val_loss, label='Validation loss')
plt.title('Grafik loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(loc=0)
plt.figure()
plt.show()